kubectl version
kubectl get all 

-------------------

kubectl run <pod> --image=<image>
kubectl get pods [ --watch ] [ -o wide ]
kubectl describe pod <pod>
kubectl edit pod <pod>

-------------------
Pods - encapsulate a container (or replicas) or different containers in cluster
       keeps alive while at least one container is still alive.
	   pods die if all containers die. 
	   IP is not fixed for a pod and new IP is assigned for a reborn pod.

ex: primeiro-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: primeiro-pod
spec:
  containers:
    - name: nginx-container
	  image: nginx:latest
	  
kubectl apply -f primeiro-pod.yml  ( cria/atualiza pod )

-------------------

kubectl delete pod <pod>  ( imperativo )
kubectl delete -f primeiro-pod.yml  ( declarativo )

kubectl exec -it <pod> -- bash

-------------------
ClusterIP - provides a fixed IP to access a pod even being reborn inside the cluster
          - acessible only inside the cluster

ex: pod2.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod2
  labels:
    app: segundo-pod
spec:
  containers:
    - name: container-pod2
	  image: nginx:latest
	  ports:
	    - containerPort: 80
		
ex: svc-pod2.yml

apiVersion: v1
kind: Service
metadata:
  name: svc-pod2
spec:
  type: ClusterIP
  ports:
    - port: 9000
	  targetPort: 80
  selector:
    app: segundo-pod

kubectl apply -f pod2.yml  ( cria/atualiza pod )
kubectl apply -f svc-pod2.yml  ( cria/atualiza service )

Test:
kubectl exec -it pod3 -- bash
$ curl <IP svc-pod2>:9000 

-------------------
kubectl get svc -o wide
kubectl describe svc <service>

kubectl delete -f svc-pod2.yml  ( declarativo )

-------------------
NodePort - provides a fixed IP to access a pod even being reborn inside the cluster
         - acessible outside the cluster

ex: pod1.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod1
  labels:
    app: primeiro-pod
spec:
  containers:
    - name: container-pod1
	  image: nginx:latest
	  ports:
	    - containerPort: 80
		
ex: svc-pod1.yml

apiVersion: v1
kind: Service
metadata:
  name: svc-pod1
spec:
  type: NodePort
  ports:
    - port: 80
	 # targetPort: 80
	  nodePort: 30000-32767  
  selector:
    app: primeiro-pod

kubectl apply -f pod1.yml  ( cria/atualiza pod )
kubectl apply -f svc-pod1.yml  ( cria/atualiza service )

Test:
kubectl exec -it pod3 -- bash
$ curl <IP svc-pod1>:80
$ curl svc-pod1:80

For Linux:
kubectl get nodes -o wide   ( get internal IP )
https://<IP cluster>:30000

For Windows:
https://locahost:30000


-------------------

kubectl delete pods --all
kubectl delete svc --all

-------------------
Env variables

ex: db.yml

apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    app: db-pod
spec:
  containers:
    - name: db-container
	  image: mysql:latest
	  ports:
	    - containerPort: 3306
	  env:
	    - name: "MYSQL_ROOT_PASSWORD"
		  value: xxx
		- name: "MYSQL_DATABASE"
		  value: xxx
		- name: "MYSQL_PASSWORD"
		  value: xxx
		  
-------------------
ConfigMap

ex: configmap.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
data:
  MYSQL_ROOT_PASSWORD: xxx
  MYSQL_DATABASE: xxx
  MYSQL_PASSWORD: xxx
  
kubectl apply -f configmap.yml
kubectl get configmap
kubectl describe configmap <config>

No Pod:

spec:
  containers:
    - name: db-container
	  image: mysql:latest
	  ports:
	    - containerPort: 3306
	  envFrom:
	    configMapRef:
		  name: db-config
		  
-------------------
ReplicaSets - automatically manages # pods up in case of failures, starting new pods

Ex : pod1-rs.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: pod1-rs
spec:
  replicas: 3
  template:
	metadata:                   --+
	  name: pod1                  |
	  labels:                     |
		app: pod1                 |
	spec:                          >  pod & container definition
	  containers:                 |
		- name: pod1-container    |
		  image: nginx:latest     |
		  ports:                  |
			- containerPort: 80 --+
  selector:
    matchLabels:
	  app: pod1


kubectl apply -f pod1-rs.yml
kubectl get replicasets / rs ( --watch )

kubectl delete -f pod1-rs.yml

-------------------
Deployment - controls and register revisions between deployments.
           - allow rollbacks between deployments.

+--------------------------------------------		   
| Deployment
| +------------------------------------------
| | ReplicaSet
| | +------+  +------+  +------+  +------+  
| | | Pod1 |  | Pod2 |  | Pod3 |  | Pod4 |  
| | +------+  +------+  +------+  +------+  
| +------------------------------------------
+--------------------------------------------

Ex : nginx-deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  template:
	metadata:                   --+
	  name: nginx-pod             |
	  labels:                     |
		app: nginx-pod             |
	spec:                          >  pod & container definition
	  containers:                 |
		- name: nginx-container   |
		  image: nginx:stable     |
		  ports:                  |
			- containerPort: 80 --+
  selector:
    matchLabels:
	  app: nginx-pod


kubectl apply -f nginx-deployment.yml
kubectl get deployments ( --watch )

Rollout
-------
kubectl rollout history deployment <deploy>
kubectl apply -f nginx-deployment.yml --record
kubectl annotate deployment <deploy> kubernetes.io/change-cause="deploy image latest"

Rollback
--------
kubectl rollout undo deployment <deploy> --to-revision=2

kubectl delete deployment <deploy>
kubectl delete -f nginx-deployment.yml

-------------------
Volumes - are persistent if containers die but not if pod die.
        - files created in the volume are kept

Ex : pod-volume.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod-volume
spec:
  containers:
    - name: nginx-container
	  image: nginx:latest
	  volumeMounts:
	    - mountPath : /volume1
		  name : primeiro-volume

    - name: jenkins-container
	  image: jenkins:alpine
	  volumeMounts:
	    - mountPath : /volume1
		  name : primeiro-volume

  volumes:
    - name: primeiro-volume
	  hostPath:
	    path: /home/data
		type: Directory / DirectoryOrCreate
		

kubectl apply -f pod-volume.yml

kubectl exec -it pod-volume --container nginx-container -- bash
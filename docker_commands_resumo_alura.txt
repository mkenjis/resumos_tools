
docker run hello-world
docker pull ubuntu - pulls only ubuntu image

Docker Containers
=================
docker run ubuntu  - if image not in local repo, pulls and runs image
                   - otherwise runs image stored in local repo

docker container run ubuntu
docker ps / docker container ls ( -a )  - also lists stopped containers

docker run ubuntu sleep 1d  - keeps image up while slept.

+--------+   --------> +--------------+
|  HOST  |   request   |  DOCKER HUB  |
+--------+ <--------   +--------------+
           pull image
			  
docker stop <contID>
docker start <contID>
docker exec -it <contID> bash  - access container running bash shell
docker pause/unpause <contID>  - freezes/unfreezes container execution

docker rm <contID>             - removes stopped container and all its data

docker run -it <contID> bash   - creates a ephemeral container and run bash

-----------

docker run -d dockersamples/static-site  - runs detached / background
docker rm -f <contID>  - force running container to stop and be removed it

docker run -p <host>:<cont> <contID>  - map host -> container ports
docker ports <contID>  - list container x hosts mapping ports


Docker Images
=============
docker images / docker image ls
docker image inspect <imgID>  - describe image in JSON format
docker image history <imgID>  = show image layers

docker run -it ubuntu bash
# touch my-file.txt  -------------------+
                                        V
                                  --------------
                                 /    R/W     /   COPY-ON-WRITE
                                --------------
  --------------                  --------------
 /            /                  /            /   R/O
--------------                  --------------
 /            /    =======>      /            /   R/O
--------------       RUN        --------------
 /            /                  /            /   R/O
--------------                  --------------
  ubuntu image                     container


Build Images
============
                                                          / | \
  +--------+                 /------\                    /  |  \
  |        |                /        \                +-----------+
  |        |  --------->   |          |  --------->   | | | | | | |
  |        |     build      \        /      run       | | | | | | | 
  +--------+                 \------/                 +-----------+
  Dockerfile                   image                    container

FROM node:14
WORKDIR /app-node
COPY . .
RUN npm install
EXPOSE 3000
ENTRYPOINT npm start

docker image build -t node-img .
docker container run -d -p 80:3000 --name node-app node-img

-----------

docker stop $(docker container ls -q)  - stops all containers at once

Parameterized Dockerfile
------------------------
ARG PORT_BUILD=6000   --> used during build time
ENV PORT=$PORT_BUILD  --> set PORT variable inside container
EXPOSE $PORT_BUILD


Docker Hub
==========
docker login -u <user>
docker push <user>/<img name>:<tag>
docker tag <img src> <img tgt>


Persistent Data
===============
docker ps -s  - shows a virtual size column in the output

* bind mounts

docker run -it -v <dir host>:<dir container> ubuntu bash
               --mount type=bind,source=<dir host>,target=<dir container> ubuntu bash

* volumes

docker volume ls
docker volume create my-volume   ( obs: my-volume is mapped in /var/lib/docker/volumes on host )
docker volume inspect my-volume

docker run -it -v my-volume:/app ubuntu bash
               --mount source=my-volume,target=/app ubuntu bash

* tmpfs  - only available in linux
         - temporary dir, not created in host filesystem
		 
docker run -it --tmpfs=/app ubuntu bash
               --mount type=tmpfs,destination=/app ubuntu bash


Docker Network
==============
docker network ls

* bridge - docker NAT network
* host - directly uses host IP
* none - no IP address in container

docker network create --driver bridge mynet  - custom network provide DNS (name -> IP resolution)

docker run -it --network mynet ubuntu bash


Docker Compose
==============
docker-compose up -d  - runs containers detached
docker-compose ps     - lists containers running
docker-compose down